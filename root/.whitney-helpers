#!/bin/zsh
# vim: ft=zsh
#
# The following is a collection of bash helper functions for dealing with
# the Whitney's docker containers. Put this file in your $HOME and make
# sure to source it in your ~/.bashrc or ~/.zshrc
#
############################################################################### 
# General helper functions
############################################################################### 
#

##
# Borrowed from
# http://stackoverflow.com/a/8574392/1243823
# 
_contains() {
  if [[ $1 =~ (^|[[:space:]])$2($|[[:space:]]) ]]; then
    echo 'true' && return 0
  fi
  echo 'false' && return 1
}

############################################################################### 
# Ruby helper functions
############################################################################### 
#
# Usage:
#   cd-gem <gem-name>
# Example:
#   cd-gem paper_trail
cd-gem() {
  cd "$(dirname "$(gem which "$1")")"
}

############################################################################### 
# Docker helper functions
############################################################################### 
#
# First we need to pull in the location of the repos. Make sure to update
# .whitney-locations with the correct repo locations
current_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $current_dir/.whitney-locations

# This command is good for using with "binding.pry" and breakpoint debugging.
# Set the breakpoint in a service and then run this to attach your input to the
# container. Can be run from anywhere on the host machine.
#
# Usage:
#   dattach <service-name>
# Example:
#   dattach cms
#     # or
#   dattach api
#   # then navigate to route to hit breakpoint
#
dattach() {
  local DOCKER_CONTAINER
  DOCKER_CONTAINER=$(docker-compose ps "$1" | tail -n +3  | grep -v run | awk '{ print $1; }' | head -n 1)
  docker attach "$DOCKER_CONTAINER"
}

dapi() {
  if [[ -f "$API_DIR"/personal.override.yml ]]; then
    docker-compose -f "$API_DIR"/docker-compose.yml \
      -f "$API_DIR"/docker-compose.override.yml \
      -f "$API_DIR"/personal.override.yml "$@"
  else
    docker-compose -f "$API_DIR"/docker-compose.yml \
      -f "$API_DIR"/docker-compose.override.yml "$@"
  fi
}

dcms() {
  if [[ -f "$CMS_DIR"/personal.override.yml ]]; then
    docker-compose -f "$CMS_DIR"/docker-compose.yml \
      -f "$CMS_DIR"/docker-compose.override.yml \
      -f "$CMS_DIR"/personal.override.yml "$@"
  else
    docker-compose -f "$CMS_DIR"/docker-compose.yml \
      -f "$CMS_DIR"/docker-compose.override.yml "$@"
  fi
}

unset WHITNEY_CMS_SERVICES
unset WHITNEY_API_SERVICES

cms() {
  local cms_command
  local args
  local key
  local service
  local service_specified
  _req-cms-services

  key="$1"

  case "$key" in
    logs)
      shift
      key="$1"

      case "$key" in
        # Usage:
        #   cms logs <service-name>
        # Example:
        #   dattach cms
        [0-9]*)
          echo 'Opening logs using second arg as tail length...'
          dcms logs -f --tail "$@"
          return 0
          ;;

        -*)
          echo 'Opening logs using only user provided options...'
          dcms logs "$@"
          return 0
          ;;

        *)
          if [[ -n "$1" ]]; then
            echo "Opening logs for services: '$*' using default options..."
            dcms logs -f --tail 100 "$*"
          else
            echo "Opening logs for all cms services using default options..."
            dcms logs -f --tail 100
          fi
          return 0
          ;;

      esac

      dcms logs -f --tail 100 cms
      ;;

    run)
      # Usage:
      #   cms <service-name> <command-name>
      # Example:
      #   cms run db echo 'hi'
      #     => dcms run --rm db echo 'hi'
      #   cms run bash
      #     => dcms run --rm cms bash
      shift
      key="$1"
      service_specified=$(_contains "$WHITNEY_CMS_SERVICES" "$key")

      if [[ "$service_specified" = 'true' ]]; then
        service="$1"
        cms_command=$(echo "${@[2]}" | xargs)
        args=$(echo "${@:3}" | xargs)
      else
        service=cms
        cms_command=$(echo "${@[1]}" | xargs)
        args=$(echo "${@:2}" | xargs)
      fi

      echo "RUN: Attempting to run command inside NEW container..."
      echo "Service: $service" 
      echo "Command: $cms_command"
      printf "\n"

      if [[ -z "$args" ]]; then
        dcms run --rm "$service" "$cms_command"
      else
        dcms run --rm "$service" "$cms_command" "$args"
      fi

      if [[ "$?" = 1 ]]; then
        echo "Error with command! Run \"dcms logs $service\" for more details"
        return 1
      fi
      ;;

    -*)
      echo 'Flag passed. Using full-command mode...'
      dcms "$@"
      ;;

    *)
      # Usage:
      #   cms <service-name> <command-name>
      # Example:
      #   cms rails c
      #     => dcms exec cms rails c
      #   cms cmsdb bash
      #     => dcms exec cmsdb bash
      service_specified=$(_contains "$WHITNEY_CMS_SERVICES" "$key")

      if [[ "$service_specified" = 'true' ]]; then
        service="$1"
        cms_command=$(echo "${@[2]}" | xargs)
        args=$(echo "${@:3}" | xargs)
      else
        service=cms
        cms_command=$(echo "${@[1]}" | xargs)
        args=$(echo "${@:2}" | xargs)
      fi

      echo "EXEC: Running command inside LIVE container..."
      echo "Service: $service" 
      echo "Command: $cms_command"
      printf "\n"

      if [[ -z "$args" ]]; then
        dcms exec "$service" "$cms_command"
      else
        dcms exec "$service" "$cms_command" "$args"
      fi

      if [[ "$?" = 1 ]]; then
        echo 'Error with command. Starting containers and trying again.'
        dcms up -d
        echo "EXEC: Reattempting run of ${cms_command}..."

        if [[ -z "$args" ]]; then
          dcms exec "$service" "$cms_command"
        else
          dcms exec "$service" "$cms_command" "$args"
        fi
      fi
      ;;

  esac
}

cms-multi() {
  dcms exec -T cms /bin/bash -c "$@"
}

api() {
  local api_command
  local args
  local key
  local service
  local service_specified
  _req-api-services

  key="$1"

  case "$key" in
    logs)
      shift
      key="$1"

      case "$key" in
        # Usage:
        #   api logs <service-name>
        # Example:
        #   dattach api
        [0-9]*)
          echo 'Opening logs using second arg as tail length...'
          dapi logs -f --tail "$@"
          return 0
          ;;

        -*)
          echo 'Opening logs using only user provided options...'
          dapi logs "$@"
          return 0
          ;;

        *)
          if [[ -n "$1" ]]; then
            echo "Opening logs for services: '$*' using default options..."
            dapi logs -f --tail 100 "$*"
          else
            echo "Opening logs for all api services using default options..."
            dapi logs -f --tail 100
          fi
          return 0
          ;;

      esac

      dapi logs -f --tail 100 api
      ;;

    run)
      # Usage:
      #   api <service-name> <command-name>
      # Example:
      #   api run db echo 'hi'
      #     => dapi run --rm db echo 'hi'
      #   api run bash
      #     => dapi run --rm api bash
      shift
      key="$1"
      service_specified=$(_contains "$WHITNEY_API_SERVICES" "$key")

      if [[ "$service_specified" = 'true' ]]; then
        service="$1"
        api_command=$(echo "${@[2]}" | xargs)
        args=$(echo "${@:3}" | xargs)
      else
        service=api
        api_command=$(echo "${@[1]}" | xargs)
        args=$(echo "${@:2}" | xargs)
      fi

      echo "RUN: Attempting to run command inside NEW container..."
      echo "Service: $service" 
      echo "Command: $api_command"
      printf "\n"

      if [[ -z "$args" ]]; then
        dapi run --rm "$service" "$api_command"
      else
        dapi run --rm "$service" "$api_command" "$args"
      fi

      if [[ "$?" = 1 ]]; then
        echo "Error with command! Run \"dapi logs $service\" for more details"
        return 1
      fi
      ;;

    -*)
      echo 'Flag passed. Using full-command mode...'
      dapi "$@"
      ;;

    *)
      # Usage:
      #   api <service-name> <command-name>
      # Example:
      #   api rails c
      #     => dapi exec api rails c
      #   api db bash
      #     => dapi exec db bash
      service_specified=$(_contains "$WHITNEY_API_SERVICES" "$key")

      if [[ "$service_specified" = 'true' ]]; then
        service="$1"
        api_command=$(echo "${@[2]}" | xargs)
        args=$(echo "${@:3}" | xargs)
      else
        service=api
        api_command=$(echo "${@[1]}" | xargs)
        args=$(echo "${@:2}" | xargs)
      fi

      echo "EXEC: Running command inside LIVE container..."
      echo "Service: $service" 
      echo "Command: $api_command"
      printf "\n"

      if [[ -z "$args" ]]; then
        dapi exec "$service" "$api_command"
      else
        dapi exec "$service" "$api_command" "$args"
      fi

      if [[ "$?" = 1 ]]; then
        echo 'Error with command. Starting containers and trying again.'
        dapi up -d
        echo "EXEC: Reattempting run of ${api_command}..."

        if [[ -z "$args" ]]; then
          dapi exec "$service" "$api_command"
        else
          dapi exec "$service" "$api_command" "$args"
        fi
      fi
      ;;

  esac
}

api-multi() {
  dapi exec -T api /bin/bash -c "$@"
}

############################################################################### 
# Docker internal helper functions
############################################################################### 
#
_is-api-service() {
  _req-api-services
  _contains "$WHITNEY_API_SERVICES" "$key"
}

_is-cms-service() {
  _req-api-services
  _contains "$WHITNEY_API_SERVICES" "$key"
}

_req-api-services() {
  local FILENAME
  local FILEPATH
  FILENAME=.whitney-services-cache
  FILEPATH="$HOME"/"$FILENAME"

  # Cache results of querying services in a hidden file in $HOME
  if [[ ! -f "$FILEPATH" ]] || test "$(find "$FILEPATH" -mmin +720)"; then
    WHITNEY_API_SERVICES=$(dapi config --services | xargs)
    echo "$WHITNEY_API_SERVICES" > "$FILEPATH"
  fi
  if [[ -z "$WHITNEY_API_SERVICES" ]]; then
    WHITNEY_API_SERVICES=$(cat "$FILEPATH")
  fi
  export WHITNEY_API_SERVICES
}

_req-cms-services() {
  local FILENAME
  local FILEPATH
  FILENAME=.whitney-cms-cache
  FILEPATH="$HOME"/"$FILENAME"

  # Cache results of querying services in a hidden file in $HOME
  if [[ ! -f "$FILEPATH" ]] || test "$(find "$FILEPATH" -mmin +720)"; then
    WHITNEY_CMS_SERVICES=$(dcms config --services | xargs)
    echo "$WHITNEY_CMS_SERVICES" > "$FILEPATH"
  fi
  if [[ -z "$WHITNEY_CMS_SERVICES" ]]; then
    WHITNEY_CMS_SERVICES=$(cat "$FILEPATH")
  fi
  export WHITNEY_CMS_SERVICES
}
