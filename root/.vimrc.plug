" Auto-install vim-plug if not already
" See https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'

let g:tern_map_keys=1
let g:tern_map_prefix='<space>'
let g:tern_request_timeout = 2
let g:tern_show_argument_hints="on_move"

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction
autocmd! User FzfStatusLine call <SID>fzf_statusline()
" Make sure you use single quotes
Plug 'junegunn/fzf', { 'dir': $HOME . '/.fzf', 'do': 'yes \| ./install --all' }
Plug 'junegunn/fzf.vim'
Plug 'pbogut/fzf-mru.vim'

" Syntax highlighting
" let g:jsx_ext_required = 1
Plug 'sheerun/vim-polyglot'

Plug 'mattn/gist-vim'

" TPope stuff
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-speeddating'

" Plug 'chase/vim-ansible-yaml'

" Assorted
Plug 'christoomey/vim-tmux-navigator'

let g:EasyMotion_leader_key = '<Space>'
Plug 'easymotion/vim-easymotion'

Plug 'haya14busa/incsearch.vim'
Plug 'Kuniwak/vint'

let g:user_emmet_mode='inv'
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-p>'
autocmd FileType html,css,javascript.jsx,typescript.tsx EmmetInstall
autocmd FileType html,css,eruby EmmetInstall
Plug 'mattn/emmet-vim'

Plug 'moll/vim-node'

Plug 'othree/html5.vim'
Plug 'othree/eregex.vim'

" see: https://github.com/scrooloose/nerdtree#faq
autocmd VimEnter * if argc() != 0 || exists("s:std_in") | wincmd p | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
Plug 'scrooloose/nerdtree'


Plug 'scrooloose/nerdcommenter'
Plug 'mattn/webapi-vim'
Plug 'mileszs/ack.vim'

" Colorschemes
Plug 'flazz/vim-colorschemes'
Plug 'w0ng/vim-hybrid'
Plug 'altercation/vim-colors-solarized'

" Plug 'vim-airline/vim-airline'

Plug 'tpope/vim-surround'

" Plug 'sheerun/vim-polyglot'

" Test framework for vimscripts. See https://github.com/junegunn/vader.vim
Plug 'junegunn/vader.vim'

" " We no longer need Ctrl-P because we can do vim-rooter plus ripgrep
let g:rooter_patterns = ['.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/', 'package.json', '.project_root']
Plug 'airblade/vim-rooter'

" neovim specific
if has('nvim')
  let g:ale_open_list = 1
  Plug 'w0rp/ale'

  set completeopt=longest,menuone,preview

  Plug 'roxma/nvim-completion-manager'
  Plug 'roxma/nvim-cm-tern',  {'do': 'npm install'}
  Plug 'roxma/ncm-flow'
endif

call plug#end()

if has('nvim')
  set notermguicolors
endif

colorscheme jellybeans
set background=light

let g:lju_timeout = "1500m"
function! CoolColors()
  for i in range(100)
    let g:lju_color = system("shuf -n 1 ~/.junk/vim-colors")
    let g:lju_color = substitute(g:lju_color, "^.*\/", "", "")
    let g:lju_color = substitute(g:lju_color, "\.vim", "", "")
    exec "colorscheme " . g:lju_color
    set background=dark
    redraw
    echom "dark: ". g:lju_color
    set background=light
    redraw
    exec "sleep " . g:lju_timeout
  endfor
  return ""
endfunction
