" vim: ft=vim

if empty(glob($HOME."/.vim/autoload/plug.vim"))
  if system('command -v curl || echo "Curl required to auto-install vim-plug.."')
    !mkdir ~/.vim/autoload >/dev/null 2>&1
    !curl -o $HOME/.vim/autoload/plug.vim -L -C -
       \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
endif

set background=dark

let far#source = 'rg'
let g:NERDTreeWinPos = 'right'
let g:NERDTreeWinSize = 20
let g:ackprg = 'rg --vimgrep --hidden'
let g:ale_enabled = 1
let g:ale_lint_delay = 2000
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_set_quickfix = 1
let g:bookmark_highlight_lines = 1
let g:bookmark_sign = 'â™¥'
let g:completor_blacklist = ['tagbar', 'qf', 'netrw', 'unite', 'vimwiki', 'nerdtree']
let g:completor_php_omni_trigger = '\$?\w+|\$?\w+\s+=\s+\w+'
let g:gutentags_cache_dir = $HOME.'/.vim/gutentags'
let g:gutentags_ctags_exclude = ['vendor', 'node_modules', 'log', 'tmp', 'public', 'dist', 'build']
let g:gutentags_ctags_options_file = $HOME.'/.ctags'
let g:gutentags_define_advanced_commands = 1
let g:gutentags_generate_on_empty_buffer = 1
let g:gutentags_project_root = ['Gemfile']
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0
let g:marvim_find_key = '<leader>M'
let g:marvim_find_key = '<leader>m'
let g:one_allow_italics = 1
let g:tagbar_width = 20
" let g:tern_map_keys=1
" let g:tern_map_prefix='<space>'
" let g:tern_request_timeout = 2
" let g:tern_show_argument_hints="on_move"
let g:tmux_navigator_no_mappings = 1
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-p>'
let g:user_emmet_mode='inv'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

if executable('ripper-tags')
    let g:tagbar_type_ruby = {
        \ 'kinds'      : ['m:modules',
                        \ 'c:classes',
                        \ 'C:constants',
                        \ 'F:singleton methods',
                        \ 'f:methods',
                        \ 'a:aliases'],
        \ 'kind2scope' : { 'c' : 'class',
                        \ 'm' : 'class' },
        \ 'scope2kind' : { 'class' : 'c' },
        \ 'ctagsbin'   : 'ripper-tags',
        \ 'ctagsargs'  : ['-f', '-']
        \ }
else
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }
endif
let g:zv_file_types = {
            \   'scss'  : 'sass',
            \   'sh'    : 'bash',
            \   'tex'   : 'latex',
            \   'yaml' : 'ansible',
            \   'yml' : 'ansible',
            \ }

exec 'silent! !mkdir -p' g:gutentags_cache_dir

call plug#begin('~/.vim/plugged')

Plug 'ervandew/supertab'

Plug 'tpope/vim-scriptease'
Plug 'airblade/vim-rooter'
Plug 'mattn/webapi-vim' " Required by gist-vim
Plug 'mattn/gist-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'cakebaker/scss-syntax.vim'
Plug 'junegunn/fzf', { 'dir': $HOME . '/.fzf', 'do': 'yes \| ./install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/vim-easy-align'
Plug 'sheerun/vim-polyglot'
Plug 'vito-c/jq.vim'
Plug 'veryeasily/vim-tmux-navigator' " We use my fork modified for i3
Plug 'Kuniwak/vint'
Plug 'moll/vim-node'
Plug 'othree/html5.vim'
Plug 'majutsushi/tagbar'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'SpaceVim/gtags.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'mxw/vim-jsx'
Plug 'mattn/emmet-vim'
Plug 'Chiel92/vim-autoformat'
Plug 'junegunn/vader.vim' " Test framework for vimscripts. See https://github.com/junegunn/vader.vim

if v:version >= 800

  map <Leader>ad <Plug>(ale_detail)
  map <Leader>an <Plug>(ale_next)
  map <Leader>ap <Plug>(ale_previous)

  if has('python3')
    set completeopt=menuone,noselect,preview
    Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }
    Plug 'maralla/completor-typescript', { 'for': 'typescript' }
    Plug 'maralla/completor.vim', { 'do': 'make js' }
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
    Plug 'shawncplus/phpcomplete.vim'
    Plug 'pearofducks/ansible-vim', { 'do': 'cd ./UltiSnips; ./generate.py' }
  else
    Plug 'pearofducks/ansible-vim'
  endif

  Plug 'w0rp/ale'
endif

" neovim specific
if has('nvim')
  Plug 'w0rp/ale'
  Plug 'roxma/nvim-completion-manager'
  Plug 'roxma/nvim-cm-tern',  {'do': 'npm install'}
  Plug 'roxma/ncm-flow'
  Plug 'roxma/ncm-github'
endif

Plug 'davidhalter/jedi'
Plug 'ludovicchabant/vim-gutentags'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-haml'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'plasticboy/vim-markdown'
Plug 'easymotion/vim-easymotion'
Plug 'brooth/far.vim'
Plug 'KabbAmine/zeavim.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'flowtype/vim-flow'
Plug 'moll/vim-node'

call plug#end()

vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
nnoremap <silent> h :TmuxNavigateLeft<cr>
nnoremap <silent> j :TmuxNavigateDown<cr>
nnoremap <silent> k :TmuxNavigateUp<cr>
nnoremap <silent> l :TmuxNavigateRight<cr>
nnoremap <silent> \ :TmuxNavigatePrevious<cr>
map <Space> <Plug>(easymotion-prefix)
map <Space>W <Plug>(easymotion-bd-W)
map <Space>f <Plug>(easymotion-s)
map <Space>t <Plug>(easymotion-bd-t)
map <Space>w <Plug>(easymotion-bd-w)
map <leader>fd <Plug>(TsuquyomiSplitDefinition)

"augroup EMMET
  "au!
  "autocmd FileType html,css,javascript.jsx,typescript.tsx EmmetInstall
  "autocmd FileType html,css,eruby EmmetInstall
"augroup END

" " NERDTree config
" " see: https://github.com/scrooloose/nerdtree#faq
" augroup NERD
"   au!
"   autocmd VimEnter * NERDTreeVCS
"   autocmd VimEnter * wincmd p
"   autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" augroup END

" augroup TAGBAR
"   au!
"   autocmd VimEnter * nested :call tagbar#autoopen(0)
" augroup END

if has('termguicolors')
  """
  " COLORS
  " set Vim-specific sequences for RGB colors
  " Borrowed from https://github.com/vim/vim/issues/993
  set termguicolors
  silent! let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  silent! let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

if has('gui_running')
  set guifont=Fira\ Code\ weight=450\ 12
endif

if &diff
  silent! colorscheme gruvbox
else
  " silent! colorscheme Atelier_DuneDark
  let g:solarized_termtrans = 1
  silent! colorscheme solarized
  hi Normal guibg=NONE ctermbg=NONE
  hi NonText guibg=NONE ctermbg=NONE
endif

" Vim named bookmarks
highlight BookmarkSign ctermbg=NONE ctermfg=160
highlight BookmarkLine ctermbg=194 ctermfg=NONE

" Defined in .vimrc.functions
call editorconfig#AddNewHook(function('LJU_filetype_hook'))
