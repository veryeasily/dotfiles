call plug#begin('~/.vim/plugged')

let g:tern_map_keys=1
let g:tern_map_prefix='<space>'
let g:tern_request_timeout = 2
let g:tern_show_argument_hints="on_move"

Plug 'jreybert/vimagit'

" Make sure you use single quotes
Plug 'junegunn/fzf', { 'dir': $HOME . '/.fzf', 'do': 'yes \| ./install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-peekaboo'

Plug 'pbogut/fzf-mru.vim'

" Syntax highlighting
let g:jsx_ext_required = 1
Plug 'sheerun/vim-polyglot'

let g:rooter_silent_chdir = 1
Plug 'airblade/vim-rooter'

Plug 'ap/vim-css-color'

Plug 'vim-vdebug/vdebug'

" TPope stuff
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'

" Assorted
Plug 'christoomey/vim-tmux-navigator'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'Kuniwak/vint'
Plug 'mattn/emmet-vim'
Plug 'moll/vim-node'
Plug 'othree/html5.vim'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

Plug 'terryma/vim-multiple-cursors'

" Colorschemes
Plug 'jacoborus/tender.vim'
Plug 'rakr/vim-one'
" Plug 'flazz/vim-colorschemes'
let g:gruvbox_contrast_light="hard"
Plug 'morhetz/gruvbox'

Plug 'vim-airline/vim-airline'

Plug 'ternjs/tern_for_vim', { 'do': 'npm install', 'for': ['javascript', 'javascript.jsx'] }

Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'

Plug 'sheerun/vim-polyglot'
Plug 'mxw/vim-jsx'

" Test framework for vimscripts. See https://github.com/junegunn/vader.vim
Plug 'junegunn/vader.vim'

if v:version >= 800
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'roxma/nvim-completion-manager'
  let g:ale_open_list = 1

  Plug 'w0rp/ale'
endif

" neovim specific
if has('nvim')
  let g:ale_open_list = 1

  Plug 'w0rp/ale'

  " let g:ale_list_window_size = 3
  

  " let g:deoplete#enable_at_startup = 1
  " if !exists('g:deoplete#omni#input_patterns')
  "   let g:deoplete#omni#input_patterns = {}
  " endif
  " " let g:deoplete#disable_auto_complete = 1
  " " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

  set completeopt=longest,menuone,preview

  Plug 'roxma/nvim-completion-manager'
  Plug 'roxma/nvim-cm-tern',  {'do': 'npm install'}
  Plug 'roxma/ncm-flow'
  Plug 'roxma/ncm-github'

  " let g:deoplete#omni#functions = {}

  " let g:deoplete#sources = {}
  " let g:tern#command = ['tern']
  " let g:deoplete#sources['javascript.jsx'] = ['file', 'ternjs']
  " let g:tern#arguments = ['--persistent']

  " let g:deoplete#sources#ternjs#types = 1
  " let g:deoplete#sources#ternjs#docs = 1
  " let g:deoplete#sources#ternjs#case_insensitive = 1

  " let g:deoplete#omni#functions.javascript = [
  "   \ 'tern#Complete',
  "   \ 'jspc#omni'
  " \ ]

  " let g:deoplete#complete_method = 'omnifunc'

  " let g:SuperTabClosePreviewOnPopupClose = 1

  " inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

  " Plug 'ervandew/supertab'
  " autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

  " function! DoRemote(arg)
  "   UpdateRemotePlugins
  " endfunction

  " Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
  " Plug 'Shougo/neco-vim'
  " Plug 'carlitux/deoplete-ternjs', { 'for': ['javascript', 'javascript.jsx'] }

  "  Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }

  " augroup omnifuncs
  "   autocmd!
  "   autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  "   autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  "   autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  "   autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  "   autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  " augroup end
  " tern
  " if exists('g:plugs["tern_for_vim"]')
  "   let g:tern_show_argument_hints = 'on_hold'
  "   let g:tern_show_signature_in_pum = 1
  "   autocmd FileType javascript setlocal omnifunc=tern#Complete
  " endif

  set undodir=~/.config/nvim/undodir
  set undofile
endif

call plug#end()



let g:CommandTFileScanner = 'git'

let g:EasyClipShareYanks = 1
let g:EasyMotion_leader_key = '<Space>'

let g:user_emmet_mode='inv'
let g:user_emmet_install_global = 0
let g:user_emmet_leader_key='<C-p>'

" Macro manager
let g:marvim_find_key = '<leader>m'
let g:marvim_find_key = '<leader>M'

autocmd FileType html,css,javascript.jsx,typescript.tsx EmmetInstall
autocmd FileType html,css,eruby EmmetInstall

let g:ag_working_path_mode='r'

" NERDTree popup

" NERDTree config
" see: https://github.com/scrooloose/nerdtree#faq
autocmd VimEnter * if argc() != 0 || exists("s:std_in") | wincmd p | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()
